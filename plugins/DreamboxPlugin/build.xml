<?xml version="1.0" encoding="UTF-8"?>

<project name="dreamboxplugin" default="build" basedir=".">
	
	<property name="dir.lib" value="lib"/>
	<property name="dir.src" value="src"/>
	<property name="dir.web" value="web"/>
	
	<property name="dir.cardservproxy.dist" value="../../dist"/>
	<property name="dir.cardservproxy.lib" value="../../lib"/>
	
	<!-- build-folder -->
	<property name="dir.build" value="build"/>
	<property name="dir.build.lib" value="build/lib"/>
	<property name="dir.build.src" value="build/src"/>
	<property name="dir.build.web" value="build/web"/>
	<property name="dir.classes" value="classes"/>
	<property name="dir.classes.web" value="classes/web"/>
	<property name="dir.dist" value="dist"/>

	<!-- lib files -->
	<patternset id="files.csp.dist">  
		<include name="cardservproxy.jar"/>
	</patternset>
	<patternset id="files.csp.lib">  
		<include name="bowhttpd.jar"/>
		<include name="bowman.jar"/>
		<include name="bowxml.jar"/>
	</patternset>
	<patternset id="files.lib">  
		<include name="*.jar"/>
	</patternset>
	
	<!-- misc files for compiling -->
	<patternset id="files.classes">  
		<include name="**/*.properties"/>
		<include name="**/*.xml"/>
	</patternset>

	<patternset id="files.classes.web">  
		<include name="**/*.*"/>        
	</patternset>

	<!-- MACRO: copy fileset -->
	<macrodef name="copy-fileset">
		<attribute name="destination-dir"/>
		<attribute name="source-dir"/>
		<attribute name="path-id"/>
		<attribute name="doFlatten" default="false"/>
		<sequential>
			<copy failonerror="false" todir="@{destination-dir}" flatten="@{doFlatten}">
				<fileset dir="@{source-dir}">  
					<patternset refid="@{path-id}" />  
				</fileset>  
			</copy>
		</sequential>
	</macrodef>
	
	<target name="clean" description="delete all previously created files and folders.">
		<delete dir="${dir.build}"/>
		<delete dir="${dir.classes}"/>
		<delete>
			<fileset dir="${dir.lib}">
				<include name="bowhttpd.jar"/>
				<include name="bowman.jar"/>
				<include name="bowxml.jar"/>
				<include name="cardservproxy.jar"/>
			</fileset>      
		</delete>
		<delete>
			<fileset dir="${dir.dist}">
				<include name="${ant.project.name}.jar"/>
				<include name="${ant.project.name}-src.tar.gz"/>
			</fileset>      
		</delete>
	</target>
	
	<target name="prepare" depends="clean" description="create and copy neccessary stuff.">
		<tstamp/>
		<mkdir dir="${dir.build}"/>
		<mkdir dir="${dir.build.lib}"/>
		<mkdir dir="${dir.classes}"/>
		<mkdir dir="${dir.classes.web}"/>
		<mkdir dir="${dir.dist}"/>
		
		<copy-fileset destination-dir="${dir.lib}" source-dir="${dir.cardservproxy.dist}" path-id="files.csp.dist"/>
		<copy-fileset destination-dir="${dir.lib}" source-dir="${dir.cardservproxy.lib}" path-id="files.csp.lib"/>
		<copy-fileset destination-dir="${dir.lib}" source-dir="${dir.lib}" path-id="files.lib"/>
		<copy-fileset destination-dir="${dir.classes}" source-dir="${dir.src}" path-id="files.classes"/>
		<copy-fileset destination-dir="${dir.classes.web}" source-dir="${dir.web}" path-id="files.classes.web"/>
		
		<!-- classpath -->
		<path id="classpath">
			<fileset dir="${dir.lib}">
				<include name="**/*.jar"/>
			</fileset>
		</path>
		<property name="classpath" refid="classpath" />
		
		<!-- check depencies -->
		<condition property="depencies.present">
			<and>
				<available filepath="${dir.lib}" file="bowhttpd.jar"/>
				<available filepath="${dir.lib}" file="bowman.jar"/>
				<available filepath="${dir.lib}" file="bowxml.jar"/>
				<available filepath="${dir.lib}" file="cardservproxy.jar"/>
				<!-- add your depencies for your plugin here -->
			    <available filepath="${dir.lib}" file="mina-core-2.0.0-M6.jar" />
				<available filepath="${dir.lib}" file="slf4j-api-1.5.2.jar" />
				<available filepath="${dir.lib}" file="slf4j-jdk14-1.5.2.jar" />
				<available filepath="${dir.lib}" file="sshd-core-0.3.0.jar" />
			</and>
		</condition>
	</target>

	<target name="compile" depends="prepare" description="compile plugin." if="depencies.present">
		<javac failonerror="false" srcdir="${dir.src}" includes="**/*.java"
			destdir="${dir.classes}" classpath="${classpath}"
			debug="on" includeantruntime="false">
		</javac>
	</target>
	
	<target name="build" depends="compile" description="build plugin." if="depencies.present">
		<jar jarfile="${dir.build.lib}/${ant.project.name}.jar">
			<fileset dir="${dir.classes}">
				<include name="**/*" />
			</fileset>
		</jar>
		<copy todir="${dir.dist}" file="${dir.build.lib}/${ant.project.name}.jar"/>
	</target>
	
	<target name="tar-src" depends="prepare" description="compress the source files as .tar.gz.">
		<mkdir dir="${dir.build.src}"/>
		<copy todir="${dir.build.src}">
			<fileset dir="${dir.src}">
				<include name="**/*" />
			</fileset>
		</copy>
		<copy todir="${dir.build.web}">
			<fileset dir="${dir.web}">
				<include name="**/*" />
			</fileset>
		</copy>
		<copy todir="${dir.build}">
			<fileset dir=".">
				<include name="README.*.txt" />
				<include name="*.iml" />
				<include name="*.ipr" />
			</fileset>
		</copy>    
		<copy todir="${dir.build}" file="build.xml"/>
		<tar tarfile="${dir.dist}/${ant.project.name}-src.tar" basedir="${dir.build}"/>
		<gzip zipfile="${dir.dist}/${ant.project.name}-src.tar.gz" src="${dir.dist}/${ant.project.name}-src.tar"/>
		<delete file="${dir.dist}/${ant.project.name}-src.tar" />
		<delete dir="${dir.build}"/>
	</target>

</project>
